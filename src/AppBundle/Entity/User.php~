<?php
/**
 * Created by PhpStorm.
 * User: Mateusz
 * Date: 23.11.2016
 * Time: 22:30
 */

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use AppBundle\Validator\Constraints as AcmeAssert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * @ORM\Table(name="app_users")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 * @UniqueEntity("username",
 * message="Użytkownik o tym nicku już istnieje w naszej bazie!")
 * @UniqueEntity("email",
 * message="Użytkownik o tym adresie email już istnieje w naszej bazie!")
 */
class User implements UserInterface, \Serializable
{
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=25, unique=true)
     *
     * @AcmeAssert\ContainsAlphanumeric(
     *     message="Podany nick zawiera niepoprawne znaki. Można używać wyłącznie liter i liczb."
     * )
     * @Assert\NotBlank(
     *     message="Musisz wypełnić to pole!"
     * )
     *
     * @Assert\Length(
     * min = 3,
     * max = 20,
     * minMessage = "Twój nick musi składać się z przynajmniej {{ limit }} znaków",
     * maxMessage = "Twój nick może składać się z maksymalnie {{ limit }} znaków"
     * )
     *
     */
    private $username;

    /**
     * @ORM\Column(type="string", length=64)
     * @AcmeAssert\ContainsAlphanumeric(
     *     message="Podane hasło zawiera niepoprawne znaki. Można używać wyłącznie liter i liczb."
     * )
     *
     * @Assert\NotBlank(
     *     message="Musisz wypełnić to pole!"
     * )
     *
     * @Assert\Length(
     * min = 6,
     * max = 30,
     * minMessage = "Twoje hasło musi składać się z przynajmniej {{ limit }} znaków",
     * maxMessage = "Twoje hasło może składać się z maksymalnie {{ limit }} znaków"
     * )
     *
     */
    private $password;

    /**
     * @var string
     *
     * @AcmeAssert\ContainsAlphanumeric(
     *     message="Podane hasło zawiera niepoprawne znaki. Można używać wyłącznie liter i liczb."
     * )
     *
     * @Assert\NotBlank(
     *     message="Musisz wypełnić to pole!"
     * )
     *
     * @Assert\Length(
     * min = 6,
     * max = 30,
     * minMessage = "Twoje hasło musi składać się z przynajmniej {{ limit }} znaków",
     * maxMessage = "Twoje hasło może składać się z maksymalnie {{ limit }} znaków"
     * )
     *
     * @Assert\Expression(
     *     "this.getPassword() === this.getPlainPassword()",
     *     message="Podane hasła nie pasują do siebie!"
     * )
     *
     *
     */
    private $plainPassword;

    /**
     * @ORM\Column(type="string", length=60, unique=true)
     *
     * @Assert\NotBlank(
     *     message="Musisz wypełnić to pole!"
     * )
     *
     * @Assert\Email(
     *     message="Podano nieprawidłowy adres email"
     * )
     *
     * @Assert\Length(
     * min = 5,
     * max = 30,
     * minMessage = "Twój adres email musi składać się z przynajmniej {{ limit }} znaków",
     * maxMessage = "Twój adres email może składać się z maksymalnie {{ limit }} znaków"
     * )
     *
     */
    private $email;

    /**
     * @ORM\Column(name="is_active", type="boolean")
     */
    private $isActive;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Cart", mappedBy="user")
     */
    private $cart;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Orders", mappedBy="user")
     */
    private $orders;

    public function __construct()
    {
        $this->cart = new ArrayCollection();
    }

    public function __construct2()
    {
        $this->orders = new ArrayCollection();
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function getSalt()
    {
        // you *may* need a real salt depending on your encoder
        // see section on salt below
        return null;
    }

    public function getPassword()
    {
        return $this->password;
    }

    /**
     * @return mixed
     */
    public function getPlainPassword()
    {
        return $this->plainPassword;
    }

    public function getRoles()
    {
        return array('ROLE_USER');
    }

    public function eraseCredentials()
    {
    }

    /** @see \Serializable::serialize() */
    public function serialize()
    {
        return serialize(array(
            $this->id,
            $this->username,
            $this->password,
            // see section on salt below
            // $this->salt,
        ));
    }

    /** @see \Serializable::unserialize() */
    public function unserialize($serialized)
    {
        list (
            $this->id,
            $this->username,
            $this->password,
            // see section on salt below
            // $this->salt
            ) = unserialize($serialized);
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * @param mixed $plainPassword
     */
    public function setPlainPassword($plainPassword)
    {
        $this->plainPassword = $plainPassword;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     *
     * @return User
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Get isActive
     *
     * @return boolean
     */
    public function getIsActive()
    {
        return $this->isActive;
    }

    /**
     * Add cart
     *
     * @param \AppBundle\Entity\Cart $cart
     *
     * @return User
     */
    public function addCart(\AppBundle\Entity\Cart $cart)
    {
        $this->cart[] = $cart;

        return $this;
    }

    /**
     * Remove cart
     *
     * @param \AppBundle\Entity\Cart $cart
     */
    public function removeCart(\AppBundle\Entity\Cart $cart)
    {
        $this->cart->removeElement($cart);
    }

    /**
     * Get cart
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCart()
    {
        return $this->cart;
    }

    /**
     * Add order
     *
     * @param \AppBundle\Entity\Orders $order
     *
     * @return User
     */
    public function addOrder(\AppBundle\Entity\Orders $order)
    {
        $this->orders[] = $order;

        return $this;
    }

    /**
     * Remove order
     *
     * @param \AppBundle\Entity\Orders $order
     */
    public function removeOrder(\AppBundle\Entity\Orders $order)
    {
        $this->orders->removeElement($order);
    }

    /**
     * Get orders
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOrders()
    {
        return $this->orders;
    }
}
